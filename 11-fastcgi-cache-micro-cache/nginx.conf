user www-data;

# spawn a worker for each cpu core
worker_processes auto;

events {
    # enter ulimit -n to find number of folders that can be open at once on this machine
    worker_connections 1024;
}

http {

    include mime.types;

    # Configure microcache (fastcgi)
    # "levels" determines the folder levels of the cache entries 1 takes last character off file
    # and creates a subfolder for all cache files ending with that name 2 takes the second and 
    # third last caracters and adds them to a sub folder within the privious folder
    # keys_zone contains the folder containing the keys and how large this folder should be allowed to get
    # inactive determines how long a file can exist before it is deleted here it is 60m
    fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
    # EG: https://, GET request, domain.com, /blog/article
    fastcgi_cache_key  "$scheme$request_method$host$request_uri";
    add_header X-Cache $upstream_cache_status;

    server {
        
        listen 80;
        server_name 192.168.2.77;

        root /sites/demo;

        # index standard directive 
        # if index.php exists load it try index.html if it does not
        index index.php index.html;

        # Cache by default
        set $no_cache 0;

        # Check for cache bypass
        if ($arg_skipcache = 1) {
            set $no_cache = 1;
        }

        location / {
            # try to get the requested uri next try the requested uri with a trailing slash else 404
            try_files $uri $uri/ =404;

            # enable cache
            # fastcgi_cache ZONE_1;
            # fastcgi_cache_valid 200 60m;
        }

        location ~\.php$ {
            # Pass php request to the php-fpm service (fastcgi)
            include fastcgi.conf;
            fastcgi_pass unix:/run/php/php7.2-fpm.sock;

            # Enable cache
            fastcgi_cache ZONE_1;
            fastcgi_cache_valid 200 60m;
            fastcgi_cache_bypass $no_cache;
        }
    }
}
